/** Implements the String type and string-related operations */

class String {

    field int thisMaxLength;
    field Array thisString;
    field int thisLength;

    /** Constructs a new empty string of length 0 that can contain at most
    maxLength characters
    */
    constructor String new(int maxLength) {
        let thisMaxLength = maxLength;
        if (maxLength > 0) {
            let thisString = Array.new(maxLength);
        }
        let thisLength = 0;
        return this;
    }

    /** Disposes this string */
    method void dispose() {
        if (thisMaxLength > 0) {
            do thisString.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the length of this string */
    method int length() {
        return thisLength;
    }

    /** Returns the character at location j of this string */
    method char charAt(int j) {
        return thisString[j];
    }

    /** Sets the j-th element of this string to c */
    method void setCharAt(int j, char c) {
        let thisString[j] = c;
        return;
    }

    /** Appends c to this string and returns this string */
    method String appendChar(char c) {
        let thisString[thisLength] = c;
        let thisLength = thisLength + 1;
        return this;
    }

    /** Erases the last character from this string */
    method void eraseLastChar() {
        let thisLength = thisLength - 1;
        return;
    }

    /** Returns the integer value of this string (or the string prefix until
    a non-digit character is detected)
    */
    method int intValue() {
        var int val, ind, curChar;
        var bool neg;
        let neg = false;
        let val = 0;
        let ind = 0;
        if (thisString[0] = 45) {
            let ind = 1;
            let neg = true;
        }
        while (ind < thisLength) {
            let curChar = thisString[ind];
            if ((curChar > 57) | (curChar < 48)) {
                if (neg) {
                    return -val;
                }
                return val;
            }
            let val = val * 10 + (curChar - 48);
            let ind = ind + 1;
        }
        if (neg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of j */
    method void setInt(int j) {
        var int curDigit, nextj;
        var Array strBack;
        if (j = 0) {
            let thisLength = 1;
            let thisString[0] = 48;
            return;
        }
        let strBack = Array.new(5);
        let thisLength = 0;
        let curDigit = 0;
        if (j < 0) {
            let thisString[0] = 45;
            let thisLength = 1;
            let j = -j;
        }
        while (j > 0) {
            let nextj = j / 10;
            let strBack[curDigit] = j - (nextj * 10) + 48;
            let curDigit = curDigit + 1;
            let j = nextj;
        }
        let curDigit = curDigit - 1;
        while (~(curDigit < 0)) {
            let thisString[thisLength] = strBack[curDigit];
            let thisLength = thisLength + 1;
            let curDigit = curDigit - 1;
        }
        return;
    }

    /** Returns the backspace character */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character */
    function char doubleQuote() {
        return 34;
    }

    /** Returns the newline character */
    function char newLine() {
        return 128;
    }
}