/** Handles memory operations */

class Memory {

    static Array memory;
    static int firstFreeBase;

    function void init() {
        let memory = 0;
        let firstFreeBase = 2049;
        do Memory.poke(2048, 14336);
        do Memory.poke(firstFreeBase, -1);
        return;
    }

    /** Returns the value of the main memory at this address */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the contents of the main memory at this address to value */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds the allocates from the heap a memory block of the specified size
    and returns a reference to its base address */
    function int alloc(int size) {

        var int curBase, newBase, sizeLeft, fullAllocSize, nextAddress;
        var int prevBase;

        let curBase = firstFreeBase;
        let prevBase = firstFreeBase;

        while (true) {

            // Need to know the next address either way
            let nextAddress = Memory.peek(curBase);

            // This checks if we found the segment we were looking for
            if (size < Memory.peek(curBase - 1)) {

                let fullAllocSize = size + 1;

                // Figure out how much is left
                let sizeLeft = Memory.peek(curBase - 1) - fullAllocSize;

                // Check if it's not long enough to be a segment
                if (sizeLeft < 3) {
                    let fullAllocSize = fullAllocSize + sizeLeft;
                }
                
                // Change the segment's [-1] value to new size
                do Memory.poke(curBase - 1, fullAllocSize);

                // See what the next base is
                let newBase = curBase + fullAllocSize;

                // Check if it's outside of the heap
                if (newBase > 16383) {
                    let newBase = -1;
                }

                // Add it to the list if it's not there already
                if (~(newBase = nextAddress)) {
                    do Memory.poke(newBase - 1, sizeLeft);
                    do Memory.poke(newBase, nextAddress);
                }                

                // Make sure the previous segment points to the new segment
                if (curBase = firstFreeBase) {
                    let firstFreeBase = newBase;
                }
                else {
                    do Memory.poke(prevBase, newBase);
                }

                return curBase;
            }

            // Next list entry
            let prevBase = curBase;
            let curBase = nextAddress;

            // -1 means that there are no more entries in the list
            if (curBase = -1) {
                do Sys.error(1);
                return -1;
            }
        }
        return -1;
    }

    /** Deallocates the given object and frees its memory space */
    function void deAlloc(Array o) {
        return;
    }
}